// Code generated by MockGen. DO NOT EDIT.
// Source: file_reader.go
//
// Generated by this command:
//
//	mockgen -source file_reader.go -destination file_reader_mock.go -package tracer
//

// Package tracer is a generated GoMock package.
package tracer

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	tracing "github.com/ethereum/go-ethereum/core/tracing"
	uint256 "github.com/holiman/uint256"
	gomock "go.uber.org/mock/gomock"
)

// MockFileReader is a mock of FileReader interface.
type MockFileReader struct {
	ctrl     *gomock.Controller
	recorder *MockFileReaderMockRecorder
	isgomock struct{}
}

// MockFileReaderMockRecorder is the mock recorder for MockFileReader.
type MockFileReaderMockRecorder struct {
	mock *MockFileReader
}

// NewMockFileReader creates a new mock instance.
func NewMockFileReader(ctrl *gomock.Controller) *MockFileReader {
	mock := &MockFileReader{ctrl: ctrl}
	mock.recorder = &MockFileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileReader) EXPECT() *MockFileReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFileReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFileReader)(nil).Close))
}

// ReadAddr mocks base method.
func (m *MockFileReader) ReadAddr() (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAddr")
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAddr indicates an expected call of ReadAddr.
func (mr *MockFileReaderMockRecorder) ReadAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAddr", reflect.TypeOf((*MockFileReader)(nil).ReadAddr))
}

// ReadBalanceChange mocks base method.
func (m *MockFileReader) ReadBalanceChange() (*uint256.Int, tracing.BalanceChangeReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBalanceChange")
	ret0, _ := ret[0].(*uint256.Int)
	ret1, _ := ret[1].(tracing.BalanceChangeReason)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadBalanceChange indicates an expected call of ReadBalanceChange.
func (mr *MockFileReaderMockRecorder) ReadBalanceChange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBalanceChange", reflect.TypeOf((*MockFileReader)(nil).ReadBalanceChange))
}

// ReadBool mocks base method.
func (m *MockFileReader) ReadBool() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBool")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBool indicates an expected call of ReadBool.
func (mr *MockFileReaderMockRecorder) ReadBool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBool", reflect.TypeOf((*MockFileReader)(nil).ReadBool))
}

// ReadData mocks base method.
func (m *MockFileReader) ReadData(size int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadData", size)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadData indicates an expected call of ReadData.
func (mr *MockFileReaderMockRecorder) ReadData(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadData", reflect.TypeOf((*MockFileReader)(nil).ReadData), size)
}

// ReadHash mocks base method.
func (m *MockFileReader) ReadHash() (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadHash")
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadHash indicates an expected call of ReadHash.
func (mr *MockFileReaderMockRecorder) ReadHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadHash", reflect.TypeOf((*MockFileReader)(nil).ReadHash))
}

// ReadNonceChange mocks base method.
func (m *MockFileReader) ReadNonceChange() (uint64, tracing.NonceChangeReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNonceChange")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(tracing.NonceChangeReason)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadNonceChange indicates an expected call of ReadNonceChange.
func (mr *MockFileReaderMockRecorder) ReadNonceChange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNonceChange", reflect.TypeOf((*MockFileReader)(nil).ReadNonceChange))
}

// ReadUint16 mocks base method.
func (m *MockFileReader) ReadUint16() (uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUint16")
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUint16 indicates an expected call of ReadUint16.
func (mr *MockFileReaderMockRecorder) ReadUint16() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUint16", reflect.TypeOf((*MockFileReader)(nil).ReadUint16))
}

// ReadUint32 mocks base method.
func (m *MockFileReader) ReadUint32() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUint32")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUint32 indicates an expected call of ReadUint32.
func (mr *MockFileReaderMockRecorder) ReadUint32() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUint32", reflect.TypeOf((*MockFileReader)(nil).ReadUint32))
}

// ReadUint64 mocks base method.
func (m *MockFileReader) ReadUint64() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUint64")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUint64 indicates an expected call of ReadUint64.
func (mr *MockFileReaderMockRecorder) ReadUint64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUint64", reflect.TypeOf((*MockFileReader)(nil).ReadUint64))
}

// ReadUint8 mocks base method.
func (m *MockFileReader) ReadUint8() (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUint8")
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUint8 indicates an expected call of ReadUint8.
func (mr *MockFileReaderMockRecorder) ReadUint8() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUint8", reflect.TypeOf((*MockFileReader)(nil).ReadUint8))
}

// ReadUnknownSizeData mocks base method.
func (m *MockFileReader) ReadUnknownSizeData() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUnknownSizeData")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUnknownSizeData indicates an expected call of ReadUnknownSizeData.
func (mr *MockFileReaderMockRecorder) ReadUnknownSizeData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUnknownSizeData", reflect.TypeOf((*MockFileReader)(nil).ReadUnknownSizeData))
}

// MockReadBuffer is a mock of ReadBuffer interface.
type MockReadBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockReadBufferMockRecorder
	isgomock struct{}
}

// MockReadBufferMockRecorder is the mock recorder for MockReadBuffer.
type MockReadBufferMockRecorder struct {
	mock *MockReadBuffer
}

// NewMockReadBuffer creates a new mock instance.
func NewMockReadBuffer(ctrl *gomock.Controller) *MockReadBuffer {
	mock := &MockReadBuffer{ctrl: ctrl}
	mock.recorder = &MockReadBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadBuffer) EXPECT() *MockReadBufferMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReadBuffer) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadBufferMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadBuffer)(nil).Read), p)
}

// ReadByte mocks base method.
func (m *MockReadBuffer) ReadByte() (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByte")
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByte indicates an expected call of ReadByte.
func (mr *MockReadBufferMockRecorder) ReadByte() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByte", reflect.TypeOf((*MockReadBuffer)(nil).ReadByte))
}
