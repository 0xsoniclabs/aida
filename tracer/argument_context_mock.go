// Code generated by MockGen. DO NOT EDIT.
// Source: argument_context.go
//
// Generated by this command:
//
//	mockgen -source argument_context.go -destination argument_context_mock.go -package tracer
//

// Package tracer is a generated GoMock package.
package tracer

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockArgumentContext is a mock of ArgumentContext interface.
type MockArgumentContext struct {
	ctrl     *gomock.Controller
	recorder *MockArgumentContextMockRecorder
	isgomock struct{}
}

// MockArgumentContextMockRecorder is the mock recorder for MockArgumentContext.
type MockArgumentContextMockRecorder struct {
	mock *MockArgumentContext
}

// NewMockArgumentContext creates a new mock instance.
func NewMockArgumentContext(ctrl *gomock.Controller) *MockArgumentContext {
	mock := &MockArgumentContext{ctrl: ctrl}
	mock.recorder = &MockArgumentContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArgumentContext) EXPECT() *MockArgumentContextMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockArgumentContext) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockArgumentContextMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockArgumentContext)(nil).Close))
}

// WriteAddressOp mocks base method.
func (m *MockArgumentContext) WriteAddressOp(op uint16, address *common.Address, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAddressOp", op, address, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAddressOp indicates an expected call of WriteAddressOp.
func (mr *MockArgumentContextMockRecorder) WriteAddressOp(op, address, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAddressOp", reflect.TypeOf((*MockArgumentContext)(nil).WriteAddressOp), op, address, data)
}

// WriteKeyOp mocks base method.
func (m *MockArgumentContext) WriteKeyOp(op uint16, address *common.Address, key *common.Hash, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteKeyOp", op, address, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteKeyOp indicates an expected call of WriteKeyOp.
func (mr *MockArgumentContextMockRecorder) WriteKeyOp(op, address, key, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteKeyOp", reflect.TypeOf((*MockArgumentContext)(nil).WriteKeyOp), op, address, key, data)
}

// WriteOp mocks base method.
func (m *MockArgumentContext) WriteOp(op uint16, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOp", op, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOp indicates an expected call of WriteOp.
func (mr *MockArgumentContextMockRecorder) WriteOp(op, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOp", reflect.TypeOf((*MockArgumentContext)(nil).WriteOp), op, data)
}

// WriteValueOp mocks base method.
func (m *MockArgumentContext) WriteValueOp(op uint16, address *common.Address, key, value *common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteValueOp", op, address, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteValueOp indicates an expected call of WriteValueOp.
func (mr *MockArgumentContextMockRecorder) WriteValueOp(op, address, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteValueOp", reflect.TypeOf((*MockArgumentContext)(nil).WriteValueOp), op, address, key, value)
}

// MockByter is a mock of Byter interface.
type MockByter struct {
	ctrl     *gomock.Controller
	recorder *MockByterMockRecorder
	isgomock struct{}
}

// MockByterMockRecorder is the mock recorder for MockByter.
type MockByterMockRecorder struct {
	mock *MockByter
}

// NewMockByter creates a new mock instance.
func NewMockByter(ctrl *gomock.Controller) *MockByter {
	mock := &MockByter{ctrl: ctrl}
	mock.recorder = &MockByterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockByter) EXPECT() *MockByterMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockByter) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockByterMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockByter)(nil).Bytes))
}
