// Code generated by MockGen. DO NOT EDIT.
// Source: file_writer.go
//
// Generated by this command:
//
//	mockgen -source file_writer.go -destination file_writer_mock.go -package tracer
//

// Package tracer is a generated GoMock package.
package tracer

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
	isgomock struct{}
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriter)(nil).Close))
}

// WriteData mocks base method.
func (m *MockWriter) WriteData(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteData indicates an expected call of WriteData.
func (mr *MockWriterMockRecorder) WriteData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteData", reflect.TypeOf((*MockWriter)(nil).WriteData), data)
}

// WriteUint16 mocks base method.
func (m *MockWriter) WriteUint16(data uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUint16", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteUint16 indicates an expected call of WriteUint16.
func (mr *MockWriterMockRecorder) WriteUint16(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUint16", reflect.TypeOf((*MockWriter)(nil).WriteUint16), data)
}

// WriteUint8 mocks base method.
func (m *MockWriter) WriteUint8(idx uint8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUint8", idx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteUint8 indicates an expected call of WriteUint8.
func (mr *MockWriterMockRecorder) WriteUint8(idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUint8", reflect.TypeOf((*MockWriter)(nil).WriteUint8), idx)
}

// MockWriteBuffer is a mock of WriteBuffer interface.
type MockWriteBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockWriteBufferMockRecorder
	isgomock struct{}
}

// MockWriteBufferMockRecorder is the mock recorder for MockWriteBuffer.
type MockWriteBufferMockRecorder struct {
	mock *MockWriteBuffer
}

// NewMockWriteBuffer creates a new mock instance.
func NewMockWriteBuffer(ctrl *gomock.Controller) *MockWriteBuffer {
	mock := &MockWriteBuffer{ctrl: ctrl}
	mock.recorder = &MockWriteBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteBuffer) EXPECT() *MockWriteBufferMockRecorder {
	return m.recorder
}

// Flush mocks base method.
func (m *MockWriteBuffer) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockWriteBufferMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockWriteBuffer)(nil).Flush))
}

// Write mocks base method.
func (m *MockWriteBuffer) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockWriteBufferMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriteBuffer)(nil).Write), p)
}

// WriteByte mocks base method.
func (m *MockWriteBuffer) WriteByte(c byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteByte", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteByte indicates an expected call of WriteByte.
func (mr *MockWriteBufferMockRecorder) WriteByte(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteByte", reflect.TypeOf((*MockWriteBuffer)(nil).WriteByte), c)
}
