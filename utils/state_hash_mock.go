// Code generated by MockGen. DO NOT EDIT.
// Source: state_hash.go
//
// Generated by this command:
//
//	mockgen -source state_hash.go -destination state_hash_mock.go -package utils
//

// Package utils is a generated GoMock package.
package utils

import (
	context "context"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	rpc "github.com/ethereum/go-ethereum/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockIRpcClient is a mock of IRpcClient interface.
type MockIRpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockIRpcClientMockRecorder
	isgomock struct{}
}

// MockIRpcClientMockRecorder is the mock recorder for MockIRpcClient.
type MockIRpcClientMockRecorder struct {
	mock *MockIRpcClient
}

// NewMockIRpcClient creates a new mock instance.
func NewMockIRpcClient(ctrl *gomock.Controller) *MockIRpcClient {
	mock := &MockIRpcClient{ctrl: ctrl}
	mock.recorder = &MockIRpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRpcClient) EXPECT() *MockIRpcClientMockRecorder {
	return m.recorder
}

// BatchCall mocks base method.
func (m *MockIRpcClient) BatchCall(b []rpc.BatchElem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCall", b)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCall indicates an expected call of BatchCall.
func (mr *MockIRpcClientMockRecorder) BatchCall(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCall", reflect.TypeOf((*MockIRpcClient)(nil).BatchCall), b)
}

// BatchCallContext mocks base method.
func (m *MockIRpcClient) BatchCallContext(ctx context.Context, b []rpc.BatchElem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCallContext", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCallContext indicates an expected call of BatchCallContext.
func (mr *MockIRpcClientMockRecorder) BatchCallContext(ctx, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCallContext", reflect.TypeOf((*MockIRpcClient)(nil).BatchCallContext), ctx, b)
}

// Call mocks base method.
func (m *MockIRpcClient) Call(result any, method string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{result, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockIRpcClientMockRecorder) Call(result, method any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{result, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIRpcClient)(nil).Call), varargs...)
}

// CallContext mocks base method.
func (m *MockIRpcClient) CallContext(ctx context.Context, result any, method string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, result, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CallContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallContext indicates an expected call of CallContext.
func (mr *MockIRpcClientMockRecorder) CallContext(ctx, result, method any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, result, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContext", reflect.TypeOf((*MockIRpcClient)(nil).CallContext), varargs...)
}

// Close mocks base method.
func (m *MockIRpcClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIRpcClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIRpcClient)(nil).Close))
}

// EthSubscribe mocks base method.
func (m *MockIRpcClient) EthSubscribe(ctx context.Context, channel any, args ...any) (*rpc.ClientSubscription, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, channel}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EthSubscribe", varargs...)
	ret0, _ := ret[0].(*rpc.ClientSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthSubscribe indicates an expected call of EthSubscribe.
func (mr *MockIRpcClientMockRecorder) EthSubscribe(ctx, channel any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, channel}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthSubscribe", reflect.TypeOf((*MockIRpcClient)(nil).EthSubscribe), varargs...)
}

// Notify mocks base method.
func (m *MockIRpcClient) Notify(ctx context.Context, method string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Notify", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockIRpcClientMockRecorder) Notify(ctx, method any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockIRpcClient)(nil).Notify), varargs...)
}

// RegisterName mocks base method.
func (m *MockIRpcClient) RegisterName(name string, receiver any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterName", name, receiver)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterName indicates an expected call of RegisterName.
func (mr *MockIRpcClientMockRecorder) RegisterName(name, receiver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterName", reflect.TypeOf((*MockIRpcClient)(nil).RegisterName), name, receiver)
}

// SetHeader mocks base method.
func (m *MockIRpcClient) SetHeader(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeader", key, value)
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockIRpcClientMockRecorder) SetHeader(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockIRpcClient)(nil).SetHeader), key, value)
}

// ShhSubscribe mocks base method.
func (m *MockIRpcClient) ShhSubscribe(ctx context.Context, channel any, args ...any) (*rpc.ClientSubscription, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, channel}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShhSubscribe", varargs...)
	ret0, _ := ret[0].(*rpc.ClientSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShhSubscribe indicates an expected call of ShhSubscribe.
func (mr *MockIRpcClientMockRecorder) ShhSubscribe(ctx, channel any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, channel}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShhSubscribe", reflect.TypeOf((*MockIRpcClient)(nil).ShhSubscribe), varargs...)
}

// Subscribe mocks base method.
func (m *MockIRpcClient) Subscribe(ctx context.Context, namespace string, channel any, args ...any) (*rpc.ClientSubscription, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, namespace, channel}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*rpc.ClientSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockIRpcClientMockRecorder) Subscribe(ctx, namespace, channel any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, namespace, channel}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockIRpcClient)(nil).Subscribe), varargs...)
}

// SupportedModules mocks base method.
func (m *MockIRpcClient) SupportedModules() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedModules")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportedModules indicates an expected call of SupportedModules.
func (mr *MockIRpcClientMockRecorder) SupportedModules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedModules", reflect.TypeOf((*MockIRpcClient)(nil).SupportedModules))
}

// SupportsSubscriptions mocks base method.
func (m *MockIRpcClient) SupportsSubscriptions() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSubscriptions")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsSubscriptions indicates an expected call of SupportsSubscriptions.
func (mr *MockIRpcClientMockRecorder) SupportsSubscriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSubscriptions", reflect.TypeOf((*MockIRpcClient)(nil).SupportsSubscriptions))
}

// MockStateHashProvider is a mock of StateHashProvider interface.
type MockStateHashProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStateHashProviderMockRecorder
	isgomock struct{}
}

// MockStateHashProviderMockRecorder is the mock recorder for MockStateHashProvider.
type MockStateHashProviderMockRecorder struct {
	mock *MockStateHashProvider
}

// NewMockStateHashProvider creates a new mock instance.
func NewMockStateHashProvider(ctrl *gomock.Controller) *MockStateHashProvider {
	mock := &MockStateHashProvider{ctrl: ctrl}
	mock.recorder = &MockStateHashProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateHashProvider) EXPECT() *MockStateHashProviderMockRecorder {
	return m.recorder
}

// GetStateHash mocks base method.
func (m *MockStateHashProvider) GetStateHash(blockNumber int) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateHash", blockNumber)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateHash indicates an expected call of GetStateHash.
func (mr *MockStateHashProviderMockRecorder) GetStateHash(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateHash", reflect.TypeOf((*MockStateHashProvider)(nil).GetStateHash), blockNumber)
}
