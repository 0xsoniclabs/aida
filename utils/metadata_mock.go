// Code generated by MockGen. DO NOT EDIT.
// Source: metadata.go
//
// Generated by this command:
//
//	mockgen -source metadata.go -destination metadata_mock.go -package utils
//

// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"

	db "github.com/0xsoniclabs/substate/db"
	gomock "go.uber.org/mock/gomock"
)

// MockMetadata is a mock of Metadata interface.
type MockMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataMockRecorder
	isgomock struct{}
}

// MockMetadataMockRecorder is the mock recorder for MockMetadata.
type MockMetadataMockRecorder struct {
	mock *MockMetadata
}

// NewMockMetadata creates a new mock instance.
func NewMockMetadata(ctrl *gomock.Controller) *MockMetadata {
	mock := &MockMetadata{ctrl: ctrl}
	mock.recorder = &MockMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadata) EXPECT() *MockMetadataMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMetadata) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMetadataMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMetadata)(nil).Delete))
}

// GenerateMetadata mocks base method.
func (m *MockMetadata) GenerateMetadata(chainID ChainID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMetadata", chainID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateMetadata indicates an expected call of GenerateMetadata.
func (mr *MockMetadataMockRecorder) GenerateMetadata(chainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMetadata", reflect.TypeOf((*MockMetadata)(nil).GenerateMetadata), chainID)
}

// GetChainID mocks base method.
func (m *MockMetadata) GetChainID() ChainID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainID")
	ret0, _ := ret[0].(ChainID)
	return ret0
}

// GetChainID indicates an expected call of GetChainID.
func (mr *MockMetadataMockRecorder) GetChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainID", reflect.TypeOf((*MockMetadata)(nil).GetChainID))
}

// GetDb mocks base method.
func (m *MockMetadata) GetDb() db.SubstateDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDb")
	ret0, _ := ret[0].(db.SubstateDB)
	return ret0
}

// GetDb indicates an expected call of GetDb.
func (mr *MockMetadataMockRecorder) GetDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDb", reflect.TypeOf((*MockMetadata)(nil).GetDb))
}

// GetDbHash mocks base method.
func (m *MockMetadata) GetDbHash() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbHash")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetDbHash indicates an expected call of GetDbHash.
func (mr *MockMetadataMockRecorder) GetDbHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbHash", reflect.TypeOf((*MockMetadata)(nil).GetDbHash))
}

// GetDbType mocks base method.
func (m *MockMetadata) GetDbType() AidaDbType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbType")
	ret0, _ := ret[0].(AidaDbType)
	return ret0
}

// GetDbType indicates an expected call of GetDbType.
func (mr *MockMetadataMockRecorder) GetDbType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbType", reflect.TypeOf((*MockMetadata)(nil).GetDbType))
}

// GetFirstBlock mocks base method.
func (m *MockMetadata) GetFirstBlock() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstBlock")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetFirstBlock indicates an expected call of GetFirstBlock.
func (mr *MockMetadataMockRecorder) GetFirstBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstBlock", reflect.TypeOf((*MockMetadata)(nil).GetFirstBlock))
}

// GetFirstEpoch mocks base method.
func (m *MockMetadata) GetFirstEpoch() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstEpoch")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetFirstEpoch indicates an expected call of GetFirstEpoch.
func (mr *MockMetadataMockRecorder) GetFirstEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstEpoch", reflect.TypeOf((*MockMetadata)(nil).GetFirstEpoch))
}

// GetLastBlock mocks base method.
func (m *MockMetadata) GetLastBlock() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlock")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLastBlock indicates an expected call of GetLastBlock.
func (mr *MockMetadataMockRecorder) GetLastBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlock", reflect.TypeOf((*MockMetadata)(nil).GetLastBlock))
}

// GetLastEpoch mocks base method.
func (m *MockMetadata) GetLastEpoch() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEpoch")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLastEpoch indicates an expected call of GetLastEpoch.
func (mr *MockMetadataMockRecorder) GetLastEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEpoch", reflect.TypeOf((*MockMetadata)(nil).GetLastEpoch))
}

// GetTimestamp mocks base method.
func (m *MockMetadata) GetTimestamp() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetTimestamp indicates an expected call of GetTimestamp.
func (mr *MockMetadataMockRecorder) GetTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockMetadata)(nil).GetTimestamp))
}

// GetUpdatesetInterval mocks base method.
func (m *MockMetadata) GetUpdatesetInterval() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesetInterval")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetUpdatesetInterval indicates an expected call of GetUpdatesetInterval.
func (mr *MockMetadataMockRecorder) GetUpdatesetInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesetInterval", reflect.TypeOf((*MockMetadata)(nil).GetUpdatesetInterval))
}

// GetUpdatesetSize mocks base method.
func (m *MockMetadata) GetUpdatesetSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesetSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetUpdatesetSize indicates an expected call of GetUpdatesetSize.
func (mr *MockMetadataMockRecorder) GetUpdatesetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesetSize", reflect.TypeOf((*MockMetadata)(nil).GetUpdatesetSize))
}

// HasHashPatch mocks base method.
func (m *MockMetadata) HasHashPatch() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasHashPatch")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasHashPatch indicates an expected call of HasHashPatch.
func (mr *MockMetadataMockRecorder) HasHashPatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasHashPatch", reflect.TypeOf((*MockMetadata)(nil).HasHashPatch))
}

// Merge mocks base method.
func (m *MockMetadata) Merge(arg0 Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merge", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Merge indicates an expected call of Merge.
func (mr *MockMetadataMockRecorder) Merge(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockMetadata)(nil).Merge), arg0)
}

// SetChainID mocks base method.
func (m *MockMetadata) SetChainID(arg0 ChainID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChainID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetChainID indicates an expected call of SetChainID.
func (mr *MockMetadataMockRecorder) SetChainID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChainID", reflect.TypeOf((*MockMetadata)(nil).SetChainID), arg0)
}

// SetDbHash mocks base method.
func (m *MockMetadata) SetDbHash(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDbHash", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDbHash indicates an expected call of SetDbHash.
func (mr *MockMetadataMockRecorder) SetDbHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDbHash", reflect.TypeOf((*MockMetadata)(nil).SetDbHash), arg0)
}

// SetDbType mocks base method.
func (m *MockMetadata) SetDbType(arg0 AidaDbType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDbType", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDbType indicates an expected call of SetDbType.
func (mr *MockMetadataMockRecorder) SetDbType(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDbType", reflect.TypeOf((*MockMetadata)(nil).SetDbType), arg0)
}

// SetFirstBlock mocks base method.
func (m *MockMetadata) SetFirstBlock(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstBlock indicates an expected call of SetFirstBlock.
func (mr *MockMetadataMockRecorder) SetFirstBlock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstBlock", reflect.TypeOf((*MockMetadata)(nil).SetFirstBlock), arg0)
}

// SetFirstEpoch mocks base method.
func (m *MockMetadata) SetFirstEpoch(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFirstEpoch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFirstEpoch indicates an expected call of SetFirstEpoch.
func (mr *MockMetadataMockRecorder) SetFirstEpoch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstEpoch", reflect.TypeOf((*MockMetadata)(nil).SetFirstEpoch), arg0)
}

// SetHasHashPatch mocks base method.
func (m *MockMetadata) SetHasHashPatch() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHasHashPatch")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHasHashPatch indicates an expected call of SetHasHashPatch.
func (mr *MockMetadataMockRecorder) SetHasHashPatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHasHashPatch", reflect.TypeOf((*MockMetadata)(nil).SetHasHashPatch))
}

// SetLastBlock mocks base method.
func (m *MockMetadata) SetLastBlock(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastBlock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastBlock indicates an expected call of SetLastBlock.
func (mr *MockMetadataMockRecorder) SetLastBlock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastBlock", reflect.TypeOf((*MockMetadata)(nil).SetLastBlock), arg0)
}

// SetLastEpoch mocks base method.
func (m *MockMetadata) SetLastEpoch(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastEpoch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastEpoch indicates an expected call of SetLastEpoch.
func (mr *MockMetadataMockRecorder) SetLastEpoch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastEpoch", reflect.TypeOf((*MockMetadata)(nil).SetLastEpoch), arg0)
}

// SetTimestamp mocks base method.
func (m *MockMetadata) SetTimestamp() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimestamp")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTimestamp indicates an expected call of SetTimestamp.
func (mr *MockMetadataMockRecorder) SetTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimestamp", reflect.TypeOf((*MockMetadata)(nil).SetTimestamp))
}

// SetUpdatesetInterval mocks base method.
func (m *MockMetadata) SetUpdatesetInterval(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpdatesetInterval", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpdatesetInterval indicates an expected call of SetUpdatesetInterval.
func (mr *MockMetadataMockRecorder) SetUpdatesetInterval(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdatesetInterval", reflect.TypeOf((*MockMetadata)(nil).SetUpdatesetInterval), arg0)
}

// SetUpdatesetSize mocks base method.
func (m *MockMetadata) SetUpdatesetSize(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpdatesetSize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpdatesetSize indicates an expected call of SetUpdatesetSize.
func (mr *MockMetadataMockRecorder) SetUpdatesetSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdatesetSize", reflect.TypeOf((*MockMetadata)(nil).SetUpdatesetSize), arg0)
}
