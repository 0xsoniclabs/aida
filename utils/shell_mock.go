// Code generated by MockGen. DO NOT EDIT.
// Source: shell.go
//
// Generated by this command:
//
//	mockgen -source shell.go -destination shell_mock.go -package utils
//

// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockShellExecutor is a mock of ShellExecutor interface.
type MockShellExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockShellExecutorMockRecorder
	isgomock struct{}
}

// MockShellExecutorMockRecorder is the mock recorder for MockShellExecutor.
type MockShellExecutorMockRecorder struct {
	mock *MockShellExecutor
}

// NewMockShellExecutor creates a new mock instance.
func NewMockShellExecutor(ctrl *gomock.Controller) *MockShellExecutor {
	mock := &MockShellExecutor{ctrl: ctrl}
	mock.recorder = &MockShellExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShellExecutor) EXPECT() *MockShellExecutorMockRecorder {
	return m.recorder
}

// Command mocks base method.
func (m *MockShellExecutor) Command(name string, arg ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Command", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Command indicates an expected call of Command.
func (mr *MockShellExecutorMockRecorder) Command(name any, arg ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockShellExecutor)(nil).Command), varargs...)
}
