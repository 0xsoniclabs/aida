// Code generated by MockGen. DO NOT EDIT.
// Source: argument_set.go
//
// Generated by this command:
//
//	mockgen -source argument_set.go -destination argument_set_mock.go -package generator
//

// Package generator is a generated GoMock package.
package generator

import (
	reflect "reflect"

	stochastic "github.com/0xsoniclabs/aida/stochastic"
	gomock "go.uber.org/mock/gomock"
)

// MockArgumentSet is a mock of ArgumentSet interface.
type MockArgumentSet struct {
	ctrl     *gomock.Controller
	recorder *MockArgumentSetMockRecorder
}

// MockArgumentSetMockRecorder is the mock recorder for MockArgumentSet.
type MockArgumentSetMockRecorder struct {
	mock *MockArgumentSet
}

// NewMockArgumentSet creates a new mock instance.
func NewMockArgumentSet(ctrl *gomock.Controller) *MockArgumentSet {
	mock := &MockArgumentSet{ctrl: ctrl}
	mock.recorder = &MockArgumentSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArgumentSet) EXPECT() *MockArgumentSetMockRecorder {
	return m.recorder
}

// Choose mocks base method.
func (m *MockArgumentSet) Choose(kind stochastic.ArgKind) (ArgumentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Choose", kind)
	ret0, _ := ret[0].(ArgumentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Choose indicates an expected call of Choose.
func (mr *MockArgumentSetMockRecorder) Choose(kind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Choose", reflect.TypeOf((*MockArgumentSet)(nil).Choose), kind)
}

// Remove mocks base method.
func (m *MockArgumentSet) Remove(v ArgumentType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockArgumentSetMockRecorder) Remove(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockArgumentSet)(nil).Remove), v)
}

// Size mocks base method.
func (m *MockArgumentSet) Size() ArgumentType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(ArgumentType)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockArgumentSetMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockArgumentSet)(nil).Size))
}
