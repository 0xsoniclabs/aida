// Code generated by MockGen. DO NOT EDIT.
// Source: randomizer.go

// Package generator is a generated GoMock package.
package generator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArgSetRandomizer is a mock of ArgSetRandomizer interface.
type MockArgSetRandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockArgSetRandomizerMockRecorder
}

// MockArgSetRandomizerMockRecorder is the mock recorder for MockArgSetRandomizer.
type MockArgSetRandomizerMockRecorder struct {
	mock *MockArgSetRandomizer
}

// NewMockArgSetRandomizer creates a new mock instance.
func NewMockArgSetRandomizer(ctrl *gomock.Controller) *MockArgSetRandomizer {
	mock := &MockArgSetRandomizer{ctrl: ctrl}
	mock.recorder = &MockArgSetRandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArgSetRandomizer) EXPECT() *MockArgSetRandomizerMockRecorder {
	return m.recorder
}

// SampleArg mocks base method.
func (m *MockArgSetRandomizer) SampleArg(n ArgumentType) ArgumentType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleArg", n)
	ret0, _ := ret[0].(ArgumentType)
	return ret0
}

// SampleArg indicates an expected call of SampleArg.
func (mr *MockArgSetRandomizerMockRecorder) SampleArg(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleArg", reflect.TypeOf((*MockArgSetRandomizer)(nil).SampleArg), n)
}

// SampleQueue mocks base method.
func (m *MockArgSetRandomizer) SampleQueue() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleQueue")
	ret0, _ := ret[0].(int)
	return ret0
}

// SampleQueue indicates an expected call of SampleQueue.
func (mr *MockArgSetRandomizerMockRecorder) SampleQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleQueue", reflect.TypeOf((*MockArgSetRandomizer)(nil).SampleQueue))
}

// MockSampleArgRandomizer is a mock of SampleArgRandomizer interface.
type MockSampleArgRandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockSampleArgRandomizerMockRecorder
}

// MockSampleArgRandomizerMockRecorder is the mock recorder for MockSampleArgRandomizer.
type MockSampleArgRandomizerMockRecorder struct {
	mock *MockSampleArgRandomizer
}

// NewMockSampleArgRandomizer creates a new mock instance.
func NewMockSampleArgRandomizer(ctrl *gomock.Controller) *MockSampleArgRandomizer {
	mock := &MockSampleArgRandomizer{ctrl: ctrl}
	mock.recorder = &MockSampleArgRandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSampleArgRandomizer) EXPECT() *MockSampleArgRandomizerMockRecorder {
	return m.recorder
}

// SampleArg mocks base method.
func (m *MockSampleArgRandomizer) SampleArg(n ArgumentType) ArgumentType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleArg", n)
	ret0, _ := ret[0].(ArgumentType)
	return ret0
}

// SampleArg indicates an expected call of SampleArg.
func (mr *MockSampleArgRandomizerMockRecorder) SampleArg(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleArg", reflect.TypeOf((*MockSampleArgRandomizer)(nil).SampleArg), n)
}

// MockSampleQueueRandomizer is a mock of SampleQueueRandomizer interface.
type MockSampleQueueRandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockSampleQueueRandomizerMockRecorder
}

// MockSampleQueueRandomizerMockRecorder is the mock recorder for MockSampleQueueRandomizer.
type MockSampleQueueRandomizerMockRecorder struct {
	mock *MockSampleQueueRandomizer
}

// NewMockSampleQueueRandomizer creates a new mock instance.
func NewMockSampleQueueRandomizer(ctrl *gomock.Controller) *MockSampleQueueRandomizer {
	mock := &MockSampleQueueRandomizer{ctrl: ctrl}
	mock.recorder = &MockSampleQueueRandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSampleQueueRandomizer) EXPECT() *MockSampleQueueRandomizerMockRecorder {
	return m.recorder
}

// SampleQueue mocks base method.
func (m *MockSampleQueueRandomizer) SampleQueue() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleQueue")
	ret0, _ := ret[0].(int)
	return ret0
}

// SampleQueue indicates an expected call of SampleQueue.
func (mr *MockSampleQueueRandomizerMockRecorder) SampleQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleQueue", reflect.TypeOf((*MockSampleQueueRandomizer)(nil).SampleQueue))
}
