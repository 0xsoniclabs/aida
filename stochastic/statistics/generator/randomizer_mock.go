// Code generated by MockGen. DO NOT EDIT.
// Source: randomizer.go
//
// Generated by this command:
//
//	mockgen -source randomizer.go -destination randomizer_mock.go -package generator
//

// Package generator is a generated GoMock package.
package generator

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockArgSetRandomizer is a mock of ArgSetRandomizer interface.
type MockArgSetRandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockArgSetRandomizerMockRecorder
}

// MockArgSetRandomizerMockRecorder is the mock recorder for MockArgSetRandomizer.
type MockArgSetRandomizerMockRecorder struct {
	mock *MockArgSetRandomizer
}

// NewMockArgSetRandomizer creates a new mock instance.
func NewMockArgSetRandomizer(ctrl *gomock.Controller) *MockArgSetRandomizer {
	mock := &MockArgSetRandomizer{ctrl: ctrl}
	mock.recorder = &MockArgSetRandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArgSetRandomizer) EXPECT() *MockArgSetRandomizerMockRecorder {
	return m.recorder
}

// SampleArg mocks base method.
func (m *MockArgSetRandomizer) SampleArg(n ArgumentType) ArgumentType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleArg", n)
	ret0, _ := ret[0].(ArgumentType)
	return ret0
}

// SampleArg indicates an expected call of SampleArg.
func (mr *MockArgSetRandomizerMockRecorder) SampleArg(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleArg", reflect.TypeOf((*MockArgSetRandomizer)(nil).SampleArg), n)
}

// SampleQueue mocks base method.
func (m *MockArgSetRandomizer) SampleQueue() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleQueue")
	ret0, _ := ret[0].(int)
	return ret0
}

// SampleQueue indicates an expected call of SampleQueue.
func (mr *MockArgSetRandomizerMockRecorder) SampleQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleQueue", reflect.TypeOf((*MockArgSetRandomizer)(nil).SampleQueue))
}

// MockSnapshotSet is a mock of SnapshotSet interface.
type MockSnapshotSet struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotSetMockRecorder
}

// MockSnapshotSetMockRecorder is the mock recorder for MockSnapshotSet.
type MockSnapshotSetMockRecorder struct {
	mock *MockSnapshotSet
}

// NewMockSnapshotSet creates a new mock instance.
func NewMockSnapshotSet(ctrl *gomock.Controller) *MockSnapshotSet {
	mock := &MockSnapshotSet{ctrl: ctrl}
	mock.recorder = &MockSnapshotSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshotSet) EXPECT() *MockSnapshotSetMockRecorder {
	return m.recorder
}

// SampleSnapshot mocks base method.
func (m *MockSnapshotSet) SampleSnapshot(n int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleSnapshot", n)
	ret0, _ := ret[0].(int)
	return ret0
}

// SampleSnapshot indicates an expected call of SampleSnapshot.
func (mr *MockSnapshotSetMockRecorder) SampleSnapshot(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleSnapshot", reflect.TypeOf((*MockSnapshotSet)(nil).SampleSnapshot), n)
}
