// Code generated by MockGen. DO NOT EDIT.
// Source: randomizer.go

// Package generator is a generated GoMock package.
package generator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArgSetRandomizer is a mock of ArgSetRandomizer interface.
type MockArgSetRandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockArgSetRandomizerMockRecorder
}

// MockArgSetRandomizerMockRecorder is the mock recorder for MockArgSetRandomizer.
type MockArgSetRandomizerMockRecorder struct {
	mock *MockArgSetRandomizer
}

// NewMockArgSetRandomizer creates a new mock instance.
func NewMockArgSetRandomizer(ctrl *gomock.Controller) *MockArgSetRandomizer {
	mock := &MockArgSetRandomizer{ctrl: ctrl}
	mock.recorder = &MockArgSetRandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArgSetRandomizer) EXPECT() *MockArgSetRandomizerMockRecorder {
	return m.recorder
}

// SampleArgument mocks base method.
func (m *MockArgSetRandomizer) SampleArgument(n int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleDistribution", n)
	ret0, _ := ret[0].(int64)
	return ret0
}

// SampleDistribution indicates an expected call of SampleDistribution.
func (mr *MockArgSetRandomizerMockRecorder) SampleDistribution(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleDistribution", reflect.TypeOf((*MockArgSetRandomizer)(nil).SampleArgument), n)
}

// SampleQueue mocks base method.
func (m *MockArgSetRandomizer) SampleQueue() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleQueue")
	ret0, _ := ret[0].(int)
	return ret0
}

// SampleQueue indicates an expected call of SampleQueue.
func (mr *MockArgSetRandomizerMockRecorder) SampleQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleQueue", reflect.TypeOf((*MockArgSetRandomizer)(nil).SampleQueue))
}
