// Code generated by MockGen. DO NOT EDIT.
// Source: randomizer.go

// Package generator is a generated GoMock package.
package generator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRandomizer is a mock of Randomizer interface.
type MockRandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockRandomizerMockRecorder
}

// MockRandomizerMockRecorder is the mock recorder for MockRandomizer.
type MockRandomizerMockRecorder struct {
	mock *MockRandomizer
}

// NewMockRandomizer creates a new mock instance.
func NewMockRandomizer(ctrl *gomock.Controller) *MockRandomizer {
	mock := &MockRandomizer{ctrl: ctrl}
	mock.recorder = &MockRandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomizer) EXPECT() *MockRandomizerMockRecorder {
	return m.recorder
}

// SampleDistribution mocks base method.
func (m *MockRandomizer) SampleDistribution(n int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleDistribution", n)
	ret0, _ := ret[0].(int64)
	return ret0
}

// SampleDistribution indicates an expected call of SampleDistribution.
func (mr *MockRandomizerMockRecorder) SampleDistribution(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleDistribution", reflect.TypeOf((*MockRandomizer)(nil).SampleDistribution), n)
}

// SampleQueue mocks base method.
func (m *MockRandomizer) SampleQueue() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleQueue")
	ret0, _ := ret[0].(int)
	return ret0
}

// SampleQueue indicates an expected call of SampleQueue.
func (mr *MockRandomizerMockRecorder) SampleQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleQueue", reflect.TypeOf((*MockRandomizer)(nil).SampleQueue))
}
