// Code generated by MockGen. DO NOT EDIT.
// Source: randomizer.go
//
// Generated by this command:
//
//	mockgen -source randomizer.go -destination randomizer_mock.go -package arguments
//

// Package arguments is a generated GoMock package.
package arguments

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRandomizer is a mock of Randomizer interface.
type MockRandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockRandomizerMockRecorder
}

// MockRandomizerMockRecorder is the mock recorder for MockRandomizer.
type MockRandomizerMockRecorder struct {
	mock *MockRandomizer
}

// NewMockRandomizer creates a new mock instance.
func NewMockRandomizer(ctrl *gomock.Controller) *MockRandomizer {
	mock := &MockRandomizer{ctrl: ctrl}
	mock.recorder = &MockRandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomizer) EXPECT() *MockRandomizerMockRecorder {
	return m.recorder
}

// SampleArg mocks base method.
func (m *MockRandomizer) SampleArg(n int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleArg", n)
	ret0, _ := ret[0].(int64)
	return ret0
}

// SampleArg indicates an expected call of SampleArg.
func (mr *MockRandomizerMockRecorder) SampleArg(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleArg", reflect.TypeOf((*MockRandomizer)(nil).SampleArg), n)
}

// SampleQueue mocks base method.
func (m *MockRandomizer) SampleQueue() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleQueue")
	ret0, _ := ret[0].(int)
	return ret0
}

// SampleQueue indicates an expected call of SampleQueue.
func (mr *MockRandomizerMockRecorder) SampleQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleQueue", reflect.TypeOf((*MockRandomizer)(nil).SampleQueue))
}
