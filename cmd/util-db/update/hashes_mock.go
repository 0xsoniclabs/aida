// Code generated by MockGen. DO NOT EDIT.
// Source: hashes.go
//
// Generated by this command:
//
//	mockgen -source hashes.go -destination hashes_mock.go -package update
//

// Package update is a generated GoMock package.
package update

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIRpcClient is a mock of IRpcClient interface.
type MockIRpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockIRpcClientMockRecorder
	isgomock struct{}
}

// MockIRpcClientMockRecorder is the mock recorder for MockIRpcClient.
type MockIRpcClientMockRecorder struct {
	mock *MockIRpcClient
}

// NewMockIRpcClient creates a new mock instance.
func NewMockIRpcClient(ctrl *gomock.Controller) *MockIRpcClient {
	mock := &MockIRpcClient{ctrl: ctrl}
	mock.recorder = &MockIRpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRpcClient) EXPECT() *MockIRpcClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockIRpcClient) Call(result any, method string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{result, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockIRpcClientMockRecorder) Call(result, method any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{result, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIRpcClient)(nil).Call), varargs...)
}
