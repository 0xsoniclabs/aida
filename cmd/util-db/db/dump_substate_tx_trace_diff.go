// Copyright 2024 Fantom Foundation
// This file is part of Aida Testing Infrastructure for Sonic
//
// Aida is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Aida is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Aida. If not, see <http://www.gnu.org/licenses/>.

package db

import (
	"fmt"
	"strconv"

	"github.com/0xsoniclabs/aida/utildb"
	"github.com/0xsoniclabs/aida/utils"
	"github.com/0xsoniclabs/substate/db"
	"github.com/urfave/cli/v2"
)

// SubstateDumpTxTraceDiffCommand returns content of transactionTrace in diff mode json format
var SubstateDumpTxTraceDiffCommand = cli.Command{
	Action:    substateDumpTxTraceDiffAction,
	Name:      "dump-substate-tx-trace-diff",
	Usage:     "returns content in debug_traceTransaction diff mode json format",
	ArgsUsage: "<blockNum> <txNum>",
	Flags: []cli.Flag{
		&utils.WorkersFlag,
		&utils.AidaDbFlag,
		&utils.SubstateEncodingFlag,
	},
	Description: `
The aida-vm dump command requires two arguments:
<blockNum> <txNum>

<blockNum> and <txNum> specify exact transaction to create diff mode format print 
same as if generated by debug_transactionTrace.`,
}

// substateDumpTxTraceDiffAction prepares config and arguments before SubstateDumpTxDiffAction
func substateDumpTxTraceDiffAction(ctx *cli.Context) error {
	var err error

	cfg, err := utils.NewConfig(ctx, utils.LastBlockArg)
	if err != nil {
		return err
	}
	cfg.First = cfg.Last

	txNumStr := ctx.Args().Get(1)
	if txNumStr == "" {
		return fmt.Errorf("missing transaction number")
	}
	txNum, err := strconv.Atoi(txNumStr)
	if err != nil {
		return fmt.Errorf("invalid transaction number: %v", err)
	}

	// prepare substate database
	sdb, err := db.NewReadOnlySubstateDB(cfg.AidaDb)
	if err != nil {
		return fmt.Errorf("cannot open aida-db; %w", err)
	}
	defer sdb.Close()

	// set encoding type
	_, err = sdb.SetSubstateEncoding(cfg.SubstateEncoding)
	if err != nil {
		return fmt.Errorf("cannot set substate encoding; %w", err)
	}

	// run substate dump task
	taskPool := sdb.NewSubstateTaskPool("aida-vm dump tx diff", utildb.SubstateDumpTxTraceDiffFunc(txNum), cfg.First, cfg.Last, ctx)
	err = taskPool.Execute()

	return err
}
