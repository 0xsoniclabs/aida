// Code generated by MockGen. DO NOT EDIT.
// Source: account.go
//
// Generated by this command:
//
//	mockgen -source account.go -destination account_mock.go -package txcontext
//

// Package txcontext is a generated GoMock package.
package txcontext

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	uint256 "github.com/holiman/uint256"
	gomock "go.uber.org/mock/gomock"
)

// MockAccount is a mock of Account interface.
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
	isgomock struct{}
}

// MockAccountMockRecorder is the mock recorder for MockAccount.
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance.
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// ForEachStorage mocks base method.
func (m *MockAccount) ForEachStorage(arg0 StorageHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForEachStorage", arg0)
}

// ForEachStorage indicates an expected call of ForEachStorage.
func (mr *MockAccountMockRecorder) ForEachStorage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEachStorage", reflect.TypeOf((*MockAccount)(nil).ForEachStorage), arg0)
}

// GetBalance mocks base method.
func (m *MockAccount) GetBalance() *uint256.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(*uint256.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockAccountMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockAccount)(nil).GetBalance))
}

// GetCode mocks base method.
func (m *MockAccount) GetCode() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockAccountMockRecorder) GetCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockAccount)(nil).GetCode))
}

// GetNonce mocks base method.
func (m *MockAccount) GetNonce() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockAccountMockRecorder) GetNonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockAccount)(nil).GetNonce))
}

// GetStorageAt mocks base method.
func (m *MockAccount) GetStorageAt(key common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageAt", key)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetStorageAt indicates an expected call of GetStorageAt.
func (mr *MockAccountMockRecorder) GetStorageAt(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAt", reflect.TypeOf((*MockAccount)(nil).GetStorageAt), key)
}

// GetStorageSize mocks base method.
func (m *MockAccount) GetStorageSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetStorageSize indicates an expected call of GetStorageSize.
func (mr *MockAccountMockRecorder) GetStorageSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageSize", reflect.TypeOf((*MockAccount)(nil).GetStorageSize))
}

// HasStorageAt mocks base method.
func (m *MockAccount) HasStorageAt(key common.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasStorageAt", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasStorageAt indicates an expected call of HasStorageAt.
func (mr *MockAccountMockRecorder) HasStorageAt(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStorageAt", reflect.TypeOf((*MockAccount)(nil).HasStorageAt), key)
}

// String mocks base method.
func (m *MockAccount) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockAccountMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAccount)(nil).String))
}
