// Code generated by MockGen. DO NOT EDIT.
// Source: carmen_test_helper.go
//
// Generated by this command:
//
//	mockgen -source carmen_test_helper.go -destination carmen_mock.go -package state
//

// Package state is a generated GoMock package.
package state

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockproxyMemoryFootprint is a mock of proxyMemoryFootprint interface.
type MockproxyMemoryFootprint struct {
	ctrl     *gomock.Controller
	recorder *MockproxyMemoryFootprintMockRecorder
	isgomock struct{}
}

// MockproxyMemoryFootprintMockRecorder is the mock recorder for MockproxyMemoryFootprint.
type MockproxyMemoryFootprintMockRecorder struct {
	mock *MockproxyMemoryFootprint
}

// NewMockproxyMemoryFootprint creates a new mock instance.
func NewMockproxyMemoryFootprint(ctrl *gomock.Controller) *MockproxyMemoryFootprint {
	mock := &MockproxyMemoryFootprint{ctrl: ctrl}
	mock.recorder = &MockproxyMemoryFootprintMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproxyMemoryFootprint) EXPECT() *MockproxyMemoryFootprintMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockproxyMemoryFootprint) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockproxyMemoryFootprintMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockproxyMemoryFootprint)(nil).String))
}

// Total mocks base method.
func (m *MockproxyMemoryFootprint) Total() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Total")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Total indicates an expected call of Total.
func (mr *MockproxyMemoryFootprintMockRecorder) Total() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Total", reflect.TypeOf((*MockproxyMemoryFootprint)(nil).Total))
}
