// Code generated by MockGen. DO NOT EDIT.
// Source: carmen_test_helper.go
//
// Generated by this command:
//
//	mockgen -source carmen_test_helper.go -destination carmen_mock.go -package state
//

// Package state is a generated GoMock package.
package state

import (
	context "context"
	"io"
	reflect "reflect"

	carmen "github.com/0xsoniclabs/carmen/go/carmen"
	gomock "go.uber.org/mock/gomock"
)

// MockproxyDatabase is a mock of proxyDatabase interface.
type MockproxyDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockproxyDatabaseMockRecorder
	isgomock struct{}
}

// MockproxyDatabaseMockRecorder is the mock recorder for MockproxyDatabase.
type MockproxyDatabaseMockRecorder struct {
	mock *MockproxyDatabase
}

// NewMockproxyDatabase creates a new mock instance.
func NewMockproxyDatabase(ctrl *gomock.Controller) *MockproxyDatabase {
	mock := &MockproxyDatabase{ctrl: ctrl}
	mock.recorder = &MockproxyDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproxyDatabase) EXPECT() *MockproxyDatabaseMockRecorder {
	return m.recorder
}

// AddBlock mocks base method.
func (m *MockproxyDatabase) AddBlock(block uint64, run func(carmen.HeadBlockContext) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlock", block, run)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBlock indicates an expected call of AddBlock.
func (mr *MockproxyDatabaseMockRecorder) AddBlock(block, run any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlock", reflect.TypeOf((*MockproxyDatabase)(nil).AddBlock), block, run)
}

// BeginBlock mocks base method.
func (m *MockproxyDatabase) BeginBlock(block uint64) (carmen.HeadBlockContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginBlock", block)
	ret0, _ := ret[0].(carmen.HeadBlockContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginBlock indicates an expected call of BeginBlock.
func (mr *MockproxyDatabaseMockRecorder) BeginBlock(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginBlock", reflect.TypeOf((*MockproxyDatabase)(nil).BeginBlock), block)
}

// Close mocks base method.
func (m *MockproxyDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockproxyDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockproxyDatabase)(nil).Close))
}

// Flush mocks base method.
func (m *MockproxyDatabase) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockproxyDatabaseMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockproxyDatabase)(nil).Flush))
}

// GetArchiveBlockHeight mocks base method.
func (m *MockproxyDatabase) GetArchiveBlockHeight() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveBlockHeight")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveBlockHeight indicates an expected call of GetArchiveBlockHeight.
func (mr *MockproxyDatabaseMockRecorder) GetArchiveBlockHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveBlockHeight", reflect.TypeOf((*MockproxyDatabase)(nil).GetArchiveBlockHeight))
}

// GetHistoricContext mocks base method.
func (m *MockproxyDatabase) GetHistoricContext(block uint64) (carmen.HistoricBlockContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricContext", block)
	ret0, _ := ret[0].(carmen.HistoricBlockContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricContext indicates an expected call of GetHistoricContext.
func (mr *MockproxyDatabaseMockRecorder) GetHistoricContext(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricContext", reflect.TypeOf((*MockproxyDatabase)(nil).GetHistoricContext), block)
}

// GetHistoricStateHash mocks base method.
func (m *MockproxyDatabase) GetHistoricStateHash(block uint64) (carmen.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricStateHash", block)
	ret0, _ := ret[0].(carmen.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricStateHash indicates an expected call of GetHistoricStateHash.
func (mr *MockproxyDatabaseMockRecorder) GetHistoricStateHash(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricStateHash", reflect.TypeOf((*MockproxyDatabase)(nil).GetHistoricStateHash), block)
}

// GetMemoryFootprint mocks base method.
func (m *MockproxyDatabase) GetMemoryFootprint() carmen.MemoryFootprint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryFootprint")
	ret0, _ := ret[0].(carmen.MemoryFootprint)
	return ret0
}

// GetMemoryFootprint indicates an expected call of GetMemoryFootprint.
func (mr *MockproxyDatabaseMockRecorder) GetMemoryFootprint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryFootprint", reflect.TypeOf((*MockproxyDatabase)(nil).GetMemoryFootprint))
}

// QueryBlock mocks base method.
func (m *MockproxyDatabase) QueryBlock(block uint64, run func(carmen.HistoricBlockContext) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBlock", block, run)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryBlock indicates an expected call of QueryBlock.
func (mr *MockproxyDatabaseMockRecorder) QueryBlock(block, run any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlock", reflect.TypeOf((*MockproxyDatabase)(nil).QueryBlock), block, run)
}

// QueryHeadState mocks base method.
func (m *MockproxyDatabase) QueryHeadState(query func(carmen.QueryContext)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryHeadState", query)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryHeadState indicates an expected call of QueryHeadState.
func (mr *MockproxyDatabaseMockRecorder) QueryHeadState(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHeadState", reflect.TypeOf((*MockproxyDatabase)(nil).QueryHeadState), query)
}

// QueryHistoricState mocks base method.
func (m *MockproxyDatabase) QueryHistoricState(block uint64, query func(carmen.QueryContext)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryHistoricState", block, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryHistoricState indicates an expected call of QueryHistoricState.
func (mr *MockproxyDatabaseMockRecorder) QueryHistoricState(block, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHistoricState", reflect.TypeOf((*MockproxyDatabase)(nil).QueryHistoricState), block, query)
}

// StartBulkLoad mocks base method.
func (m *MockproxyDatabase) StartBulkLoad(block uint64) (carmen.BulkLoad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBulkLoad", block)
	ret0, _ := ret[0].(carmen.BulkLoad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBulkLoad indicates an expected call of StartBulkLoad.
func (mr *MockproxyDatabaseMockRecorder) StartBulkLoad(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBulkLoad", reflect.TypeOf((*MockproxyDatabase)(nil).StartBulkLoad), block)
}

// MockproxyTransactionContext is a mock of proxyTransactionContext interface.
type MockproxyTransactionContext struct {
	ctrl     *gomock.Controller
	recorder *MockproxyTransactionContextMockRecorder
	isgomock struct{}
}

// MockproxyTransactionContextMockRecorder is the mock recorder for MockproxyTransactionContext.
type MockproxyTransactionContextMockRecorder struct {
	mock *MockproxyTransactionContext
}

// NewMockproxyTransactionContext creates a new mock instance.
func NewMockproxyTransactionContext(ctrl *gomock.Controller) *MockproxyTransactionContext {
	mock := &MockproxyTransactionContext{ctrl: ctrl}
	mock.recorder = &MockproxyTransactionContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproxyTransactionContext) EXPECT() *MockproxyTransactionContextMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockproxyTransactionContext) Abort() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort")
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockproxyTransactionContextMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockproxyTransactionContext)(nil).Abort))
}

// AddAddressToAccessList mocks base method.
func (m *MockproxyTransactionContext) AddAddressToAccessList(arg0 carmen.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToAccessList", arg0)
}

// AddAddressToAccessList indicates an expected call of AddAddressToAccessList.
func (mr *MockproxyTransactionContextMockRecorder) AddAddressToAccessList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToAccessList", reflect.TypeOf((*MockproxyTransactionContext)(nil).AddAddressToAccessList), arg0)
}

// AddBalance mocks base method.
func (m *MockproxyTransactionContext) AddBalance(arg0 carmen.Address, arg1 carmen.Amount) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBalance", arg0, arg1)
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockproxyTransactionContextMockRecorder) AddBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockproxyTransactionContext)(nil).AddBalance), arg0, arg1)
}

// AddLog mocks base method.
func (m *MockproxyTransactionContext) AddLog(arg0 *carmen.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", arg0)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockproxyTransactionContextMockRecorder) AddLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockproxyTransactionContext)(nil).AddLog), arg0)
}

// AddRefund mocks base method.
func (m *MockproxyTransactionContext) AddRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRefund", arg0)
}

// AddRefund indicates an expected call of AddRefund.
func (mr *MockproxyTransactionContextMockRecorder) AddRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefund", reflect.TypeOf((*MockproxyTransactionContext)(nil).AddRefund), arg0)
}

// AddSlotToAccessList mocks base method.
func (m *MockproxyTransactionContext) AddSlotToAccessList(arg0 carmen.Address, arg1 carmen.Key) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToAccessList", arg0, arg1)
}

// AddSlotToAccessList indicates an expected call of AddSlotToAccessList.
func (mr *MockproxyTransactionContextMockRecorder) AddSlotToAccessList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToAccessList", reflect.TypeOf((*MockproxyTransactionContext)(nil).AddSlotToAccessList), arg0, arg1)
}

// ClearAccessList mocks base method.
func (m *MockproxyTransactionContext) ClearAccessList() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearAccessList")
}

// ClearAccessList indicates an expected call of ClearAccessList.
func (mr *MockproxyTransactionContextMockRecorder) ClearAccessList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAccessList", reflect.TypeOf((*MockproxyTransactionContext)(nil).ClearAccessList))
}

// Commit mocks base method.
func (m *MockproxyTransactionContext) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockproxyTransactionContextMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockproxyTransactionContext)(nil).Commit))
}

// CreateAccount mocks base method.
func (m *MockproxyTransactionContext) CreateAccount(arg0 carmen.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", arg0)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockproxyTransactionContextMockRecorder) CreateAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockproxyTransactionContext)(nil).CreateAccount), arg0)
}

// CreateContract mocks base method.
func (m *MockproxyTransactionContext) CreateContract(arg0 carmen.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateContract", arg0)
}

// CreateContract indicates an expected call of CreateContract.
func (mr *MockproxyTransactionContextMockRecorder) CreateContract(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContract", reflect.TypeOf((*MockproxyTransactionContext)(nil).CreateContract), arg0)
}

// Empty mocks base method.
func (m *MockproxyTransactionContext) Empty(arg0 carmen.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockproxyTransactionContextMockRecorder) Empty(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockproxyTransactionContext)(nil).Empty), arg0)
}

// Exist mocks base method.
func (m *MockproxyTransactionContext) Exist(arg0 carmen.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockproxyTransactionContextMockRecorder) Exist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockproxyTransactionContext)(nil).Exist), arg0)
}

// GetBalance mocks base method.
func (m *MockproxyTransactionContext) GetBalance(arg0 carmen.Address) carmen.Amount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(carmen.Amount)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockproxyTransactionContextMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockproxyTransactionContext)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockproxyTransactionContext) GetCode(arg0 carmen.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockproxyTransactionContextMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockproxyTransactionContext)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockproxyTransactionContext) GetCodeHash(arg0 carmen.Address) carmen.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(carmen.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockproxyTransactionContextMockRecorder) GetCodeHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockproxyTransactionContext)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockproxyTransactionContext) GetCodeSize(arg0 carmen.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockproxyTransactionContextMockRecorder) GetCodeSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockproxyTransactionContext)(nil).GetCodeSize), arg0)
}

// GetCommittedState mocks base method.
func (m *MockproxyTransactionContext) GetCommittedState(arg0 carmen.Address, arg1 carmen.Key) carmen.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedState", arg0, arg1)
	ret0, _ := ret[0].(carmen.Value)
	return ret0
}

// GetCommittedState indicates an expected call of GetCommittedState.
func (mr *MockproxyTransactionContextMockRecorder) GetCommittedState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedState", reflect.TypeOf((*MockproxyTransactionContext)(nil).GetCommittedState), arg0, arg1)
}

// GetLogs mocks base method.
func (m *MockproxyTransactionContext) GetLogs() []*carmen.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs")
	ret0, _ := ret[0].([]*carmen.Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockproxyTransactionContextMockRecorder) GetLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockproxyTransactionContext)(nil).GetLogs))
}

// GetNonce mocks base method.
func (m *MockproxyTransactionContext) GetNonce(arg0 carmen.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockproxyTransactionContextMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockproxyTransactionContext)(nil).GetNonce), arg0)
}

// GetRefund mocks base method.
func (m *MockproxyTransactionContext) GetRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockproxyTransactionContextMockRecorder) GetRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockproxyTransactionContext)(nil).GetRefund))
}

// GetState mocks base method.
func (m *MockproxyTransactionContext) GetState(arg0 carmen.Address, arg1 carmen.Key) carmen.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(carmen.Value)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockproxyTransactionContextMockRecorder) GetState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockproxyTransactionContext)(nil).GetState), arg0, arg1)
}

// GetTransientState mocks base method.
func (m *MockproxyTransactionContext) GetTransientState(arg0 carmen.Address, arg1 carmen.Key) carmen.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransientState", arg0, arg1)
	ret0, _ := ret[0].(carmen.Value)
	return ret0
}

// GetTransientState indicates an expected call of GetTransientState.
func (mr *MockproxyTransactionContextMockRecorder) GetTransientState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransientState", reflect.TypeOf((*MockproxyTransactionContext)(nil).GetTransientState), arg0, arg1)
}

// HasEmptyStorage mocks base method.
func (m *MockproxyTransactionContext) HasEmptyStorage(addr carmen.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasEmptyStorage", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasEmptyStorage indicates an expected call of HasEmptyStorage.
func (mr *MockproxyTransactionContextMockRecorder) HasEmptyStorage(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasEmptyStorage", reflect.TypeOf((*MockproxyTransactionContext)(nil).HasEmptyStorage), addr)
}

// HasSelfDestructed mocks base method.
func (m *MockproxyTransactionContext) HasSelfDestructed(arg0 carmen.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSelfDestructed", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSelfDestructed indicates an expected call of HasSelfDestructed.
func (mr *MockproxyTransactionContextMockRecorder) HasSelfDestructed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSelfDestructed", reflect.TypeOf((*MockproxyTransactionContext)(nil).HasSelfDestructed), arg0)
}

// IsAddressInAccessList mocks base method.
func (m *MockproxyTransactionContext) IsAddressInAccessList(arg0 carmen.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddressInAccessList", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAddressInAccessList indicates an expected call of IsAddressInAccessList.
func (mr *MockproxyTransactionContextMockRecorder) IsAddressInAccessList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddressInAccessList", reflect.TypeOf((*MockproxyTransactionContext)(nil).IsAddressInAccessList), arg0)
}

// IsSlotInAccessList mocks base method.
func (m *MockproxyTransactionContext) IsSlotInAccessList(arg0 carmen.Address, arg1 carmen.Key) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSlotInAccessList", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsSlotInAccessList indicates an expected call of IsSlotInAccessList.
func (mr *MockproxyTransactionContextMockRecorder) IsSlotInAccessList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlotInAccessList", reflect.TypeOf((*MockproxyTransactionContext)(nil).IsSlotInAccessList), arg0, arg1)
}

// RevertToSnapshot mocks base method.
func (m *MockproxyTransactionContext) RevertToSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", arg0)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockproxyTransactionContextMockRecorder) RevertToSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockproxyTransactionContext)(nil).RevertToSnapshot), arg0)
}

// SelfDestruct mocks base method.
func (m *MockproxyTransactionContext) SelfDestruct(arg0 carmen.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfDestruct", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SelfDestruct indicates an expected call of SelfDestruct.
func (mr *MockproxyTransactionContextMockRecorder) SelfDestruct(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct", reflect.TypeOf((*MockproxyTransactionContext)(nil).SelfDestruct), arg0)
}

// SelfDestruct6780 mocks base method.
func (m *MockproxyTransactionContext) SelfDestruct6780(arg0 carmen.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfDestruct6780", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SelfDestruct6780 indicates an expected call of SelfDestruct6780.
func (mr *MockproxyTransactionContextMockRecorder) SelfDestruct6780(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct6780", reflect.TypeOf((*MockproxyTransactionContext)(nil).SelfDestruct6780), arg0)
}

// SetCode mocks base method.
func (m *MockproxyTransactionContext) SetCode(arg0 carmen.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockproxyTransactionContextMockRecorder) SetCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockproxyTransactionContext)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockproxyTransactionContext) SetNonce(arg0 carmen.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockproxyTransactionContextMockRecorder) SetNonce(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockproxyTransactionContext)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockproxyTransactionContext) SetState(arg0 carmen.Address, arg1 carmen.Key, arg2 carmen.Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockproxyTransactionContextMockRecorder) SetState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockproxyTransactionContext)(nil).SetState), arg0, arg1, arg2)
}

// SetTransientState mocks base method.
func (m *MockproxyTransactionContext) SetTransientState(arg0 carmen.Address, arg1 carmen.Key, arg2 carmen.Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransientState", arg0, arg1, arg2)
}

// SetTransientState indicates an expected call of SetTransientState.
func (mr *MockproxyTransactionContextMockRecorder) SetTransientState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransientState", reflect.TypeOf((*MockproxyTransactionContext)(nil).SetTransientState), arg0, arg1, arg2)
}

// Snapshot mocks base method.
func (m *MockproxyTransactionContext) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockproxyTransactionContextMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockproxyTransactionContext)(nil).Snapshot))
}

// SubBalance mocks base method.
func (m *MockproxyTransactionContext) SubBalance(arg0 carmen.Address, arg1 carmen.Amount) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubBalance", arg0, arg1)
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockproxyTransactionContextMockRecorder) SubBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockproxyTransactionContext)(nil).SubBalance), arg0, arg1)
}

// SubRefund mocks base method.
func (m *MockproxyTransactionContext) SubRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubRefund", arg0)
}

// SubRefund indicates an expected call of SubRefund.
func (mr *MockproxyTransactionContextMockRecorder) SubRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubRefund", reflect.TypeOf((*MockproxyTransactionContext)(nil).SubRefund), arg0)
}

// MockproxyHistoricBlockContext is a mock of proxyHistoricBlockContext interface.
type MockproxyHistoricBlockContext struct {
	ctrl     *gomock.Controller
	recorder *MockproxyHistoricBlockContextMockRecorder
	isgomock struct{}
}

// MockproxyHistoricBlockContextMockRecorder is the mock recorder for MockproxyHistoricBlockContext.
type MockproxyHistoricBlockContextMockRecorder struct {
	mock *MockproxyHistoricBlockContext
}

// NewMockproxyHistoricBlockContext creates a new mock instance.
func NewMockproxyHistoricBlockContext(ctrl *gomock.Controller) *MockproxyHistoricBlockContext {
	mock := &MockproxyHistoricBlockContext{ctrl: ctrl}
	mock.recorder = &MockproxyHistoricBlockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproxyHistoricBlockContext) EXPECT() *MockproxyHistoricBlockContextMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockproxyHistoricBlockContext) BeginTransaction() (carmen.TransactionContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(carmen.TransactionContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockproxyHistoricBlockContextMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockproxyHistoricBlockContext)(nil).BeginTransaction))
}

// Close mocks base method.
func (m *MockproxyHistoricBlockContext) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockproxyHistoricBlockContextMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockproxyHistoricBlockContext)(nil).Close))
}

// Export mocks base method.
func (m *MockproxyHistoricBlockContext) Export(ctx context.Context, out io.Writer) (carmen.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export", ctx, out)
	ret0, _ := ret[0].(carmen.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Export indicates an expected call of Export.
func (mr *MockproxyHistoricBlockContextMockRecorder) Export(ctx, out any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockproxyHistoricBlockContext)(nil).Export), ctx, out)
}

// GetProof mocks base method.
func (m *MockproxyHistoricBlockContext) GetProof(address carmen.Address, keys ...carmen.Key) (carmen.WitnessProof, error) {
	m.ctrl.T.Helper()
	varargs := []any{address}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProof", varargs...)
	ret0, _ := ret[0].(carmen.WitnessProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProof indicates an expected call of GetProof.
func (mr *MockproxyHistoricBlockContextMockRecorder) GetProof(address any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{address}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProof", reflect.TypeOf((*MockproxyHistoricBlockContext)(nil).GetProof), varargs...)
}

// RunTransaction mocks base method.
func (m *MockproxyHistoricBlockContext) RunTransaction(run func(carmen.TransactionContext) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransaction", run)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockproxyHistoricBlockContextMockRecorder) RunTransaction(run any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockproxyHistoricBlockContext)(nil).RunTransaction), run)
}

// MockproxyQueryContext is a mock of proxyQueryContext interface.
type MockproxyQueryContext struct {
	ctrl     *gomock.Controller
	recorder *MockproxyQueryContextMockRecorder
	isgomock struct{}
}

// MockproxyQueryContextMockRecorder is the mock recorder for MockproxyQueryContext.
type MockproxyQueryContextMockRecorder struct {
	mock *MockproxyQueryContext
}

// NewMockproxyQueryContext creates a new mock instance.
func NewMockproxyQueryContext(ctrl *gomock.Controller) *MockproxyQueryContext {
	mock := &MockproxyQueryContext{ctrl: ctrl}
	mock.recorder = &MockproxyQueryContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproxyQueryContext) EXPECT() *MockproxyQueryContextMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockproxyQueryContext) GetBalance(arg0 carmen.Address) carmen.Amount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(carmen.Amount)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockproxyQueryContextMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockproxyQueryContext)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockproxyQueryContext) GetCode(arg0 carmen.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockproxyQueryContextMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockproxyQueryContext)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockproxyQueryContext) GetCodeHash(arg0 carmen.Address) carmen.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(carmen.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockproxyQueryContextMockRecorder) GetCodeHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockproxyQueryContext)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockproxyQueryContext) GetCodeSize(arg0 carmen.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockproxyQueryContextMockRecorder) GetCodeSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockproxyQueryContext)(nil).GetCodeSize), arg0)
}

// GetNonce mocks base method.
func (m *MockproxyQueryContext) GetNonce(arg0 carmen.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockproxyQueryContextMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockproxyQueryContext)(nil).GetNonce), arg0)
}

// GetState mocks base method.
func (m *MockproxyQueryContext) GetState(arg0 carmen.Address, arg1 carmen.Key) carmen.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(carmen.Value)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockproxyQueryContextMockRecorder) GetState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockproxyQueryContext)(nil).GetState), arg0, arg1)
}

// GetStateHash mocks base method.
func (m *MockproxyQueryContext) GetStateHash() carmen.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateHash")
	ret0, _ := ret[0].(carmen.Hash)
	return ret0
}

// GetStateHash indicates an expected call of GetStateHash.
func (mr *MockproxyQueryContextMockRecorder) GetStateHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateHash", reflect.TypeOf((*MockproxyQueryContext)(nil).GetStateHash))
}

// HasEmptyStorage mocks base method.
func (m *MockproxyQueryContext) HasEmptyStorage(addr carmen.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasEmptyStorage", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasEmptyStorage indicates an expected call of HasEmptyStorage.
func (mr *MockproxyQueryContextMockRecorder) HasEmptyStorage(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasEmptyStorage", reflect.TypeOf((*MockproxyQueryContext)(nil).HasEmptyStorage), addr)
}

// MockproxyMemoryFootprint is a mock of proxyMemoryFootprint interface.
type MockproxyMemoryFootprint struct {
	ctrl     *gomock.Controller
	recorder *MockproxyMemoryFootprintMockRecorder
	isgomock struct{}
}

// MockproxyMemoryFootprintMockRecorder is the mock recorder for MockproxyMemoryFootprint.
type MockproxyMemoryFootprintMockRecorder struct {
	mock *MockproxyMemoryFootprint
}

// NewMockproxyMemoryFootprint creates a new mock instance.
func NewMockproxyMemoryFootprint(ctrl *gomock.Controller) *MockproxyMemoryFootprint {
	mock := &MockproxyMemoryFootprint{ctrl: ctrl}
	mock.recorder = &MockproxyMemoryFootprintMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproxyMemoryFootprint) EXPECT() *MockproxyMemoryFootprintMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockproxyMemoryFootprint) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockproxyMemoryFootprintMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockproxyMemoryFootprint)(nil).String))
}

// Total mocks base method.
func (m *MockproxyMemoryFootprint) Total() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Total")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Total indicates an expected call of Total.
func (mr *MockproxyMemoryFootprintMockRecorder) Total() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Total", reflect.TypeOf((*MockproxyMemoryFootprint)(nil).Total))
}
