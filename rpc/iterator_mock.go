// Code generated by MockGen. DO NOT EDIT.
// Source: iterator.go
//
// Generated by this command:
//
//	mockgen -source iterator.go -destination iterator_mock.go -package rpc
//

// Package rpc is a generated GoMock package.
package rpc

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProxyIoReadCloser is a mock of ProxyIoReadCloser interface.
type MockProxyIoReadCloser struct {
	ctrl     *gomock.Controller
	recorder *MockProxyIoReadCloserMockRecorder
	isgomock struct{}
}

// MockProxyIoReadCloserMockRecorder is the mock recorder for MockProxyIoReadCloser.
type MockProxyIoReadCloserMockRecorder struct {
	mock *MockProxyIoReadCloser
}

// NewMockProxyIoReadCloser creates a new mock instance.
func NewMockProxyIoReadCloser(ctrl *gomock.Controller) *MockProxyIoReadCloser {
	mock := &MockProxyIoReadCloser{ctrl: ctrl}
	mock.recorder = &MockProxyIoReadCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyIoReadCloser) EXPECT() *MockProxyIoReadCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProxyIoReadCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProxyIoReadCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProxyIoReadCloser)(nil).Close))
}

// Read mocks base method.
func (m *MockProxyIoReadCloser) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockProxyIoReadCloserMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockProxyIoReadCloser)(nil).Read), p)
}
