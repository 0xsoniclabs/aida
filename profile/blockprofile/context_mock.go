// Code generated by MockGen. DO NOT EDIT.
// Source: context.go
//
// Generated by this command:
//
//	mockgen -source context.go -destination context_mock.go -package blockprofile
//

// Package blockprofile is a generated GoMock package.
package blockprofile

import (
	reflect "reflect"
	time "time"

	executor "github.com/0xsoniclabs/aida/executor"
	graphutil "github.com/0xsoniclabs/aida/profile/graphutil"
	txcontext "github.com/0xsoniclabs/aida/txcontext"
	gomock "go.uber.org/mock/gomock"
)

// MockIContext is a mock of IContext interface.
type MockIContext struct {
	ctrl     *gomock.Controller
	recorder *MockIContextMockRecorder
	isgomock struct{}
}

// MockIContextMockRecorder is the mock recorder for MockIContext.
type MockIContextMockRecorder struct {
	mock *MockIContext
}

// NewMockIContext creates a new mock instance.
func NewMockIContext(ctrl *gomock.Controller) *MockIContext {
	mock := &MockIContext{ctrl: ctrl}
	mock.recorder = &MockIContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContext) EXPECT() *MockIContextMockRecorder {
	return m.recorder
}

// GetProfileData mocks base method.
func (m *MockIContext) GetProfileData(curBlock uint64, tBlock time.Duration) (*ProfileData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileData", curBlock, tBlock)
	ret0, _ := ret[0].(*ProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileData indicates an expected call of GetProfileData.
func (mr *MockIContextMockRecorder) GetProfileData(curBlock, tBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileData", reflect.TypeOf((*MockIContext)(nil).GetProfileData), curBlock, tBlock)
}

// RecordTransaction mocks base method.
func (m *MockIContext) RecordTransaction(state executor.State[txcontext.TxContext], tTransaction time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTransaction", state, tTransaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTransaction indicates an expected call of RecordTransaction.
func (mr *MockIContextMockRecorder) RecordTransaction(state, tTransaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransaction", reflect.TypeOf((*MockIContext)(nil).RecordTransaction), state, tTransaction)
}

// dependencies mocks base method.
func (m *MockIContext) dependencies(addresses AddressSet) graphutil.OrdinalSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dependencies", addresses)
	ret0, _ := ret[0].(graphutil.OrdinalSet)
	return ret0
}

// dependencies indicates an expected call of dependencies.
func (mr *MockIContextMockRecorder) dependencies(addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dependencies", reflect.TypeOf((*MockIContext)(nil).dependencies), addresses)
}

// earliestTimeToRun mocks base method.
func (m *MockIContext) earliestTimeToRun(addresses AddressSet) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "earliestTimeToRun", addresses)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// earliestTimeToRun indicates an expected call of earliestTimeToRun.
func (mr *MockIContextMockRecorder) earliestTimeToRun(addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "earliestTimeToRun", reflect.TypeOf((*MockIContext)(nil).earliestTimeToRun), addresses)
}
