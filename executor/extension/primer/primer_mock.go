// Code generated by MockGen. DO NOT EDIT.
// Source: primer_test.go
//
// Generated by this command:
//
//	mockgen -source=primer_test.go -destination=primer_mock.go -package=primer
//

// Package primer is a generated GoMock package.
package primer

import (
	reflect "reflect"

	util "github.com/syndtr/goleveldb/leveldb/util"
	gomock "go.uber.org/mock/gomock"
)

// MockProxyIterator is a mock of ProxyIterator interface.
type MockProxyIterator struct {
	ctrl     *gomock.Controller
	recorder *MockProxyIteratorMockRecorder
	isgomock struct{}
}

// MockProxyIteratorMockRecorder is the mock recorder for MockProxyIterator.
type MockProxyIteratorMockRecorder struct {
	mock *MockProxyIterator
}

// NewMockProxyIterator creates a new mock instance.
func NewMockProxyIterator(ctrl *gomock.Controller) *MockProxyIterator {
	mock := &MockProxyIterator{ctrl: ctrl}
	mock.recorder = &MockProxyIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyIterator) EXPECT() *MockProxyIteratorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockProxyIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockProxyIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockProxyIterator)(nil).Error))
}

// First mocks base method.
func (m *MockProxyIterator) First() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First")
	ret0, _ := ret[0].(bool)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockProxyIteratorMockRecorder) First() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockProxyIterator)(nil).First))
}

// Key mocks base method.
func (m *MockProxyIterator) Key() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockProxyIteratorMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockProxyIterator)(nil).Key))
}

// Last mocks base method.
func (m *MockProxyIterator) Last() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Last indicates an expected call of Last.
func (mr *MockProxyIteratorMockRecorder) Last() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockProxyIterator)(nil).Last))
}

// Next mocks base method.
func (m *MockProxyIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockProxyIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockProxyIterator)(nil).Next))
}

// Prev mocks base method.
func (m *MockProxyIterator) Prev() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prev")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Prev indicates an expected call of Prev.
func (mr *MockProxyIteratorMockRecorder) Prev() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prev", reflect.TypeOf((*MockProxyIterator)(nil).Prev))
}

// Release mocks base method.
func (m *MockProxyIterator) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockProxyIteratorMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockProxyIterator)(nil).Release))
}

// Seek mocks base method.
func (m *MockProxyIterator) Seek(key []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Seek indicates an expected call of Seek.
func (mr *MockProxyIteratorMockRecorder) Seek(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockProxyIterator)(nil).Seek), key)
}

// SetReleaser mocks base method.
func (m *MockProxyIterator) SetReleaser(releaser util.Releaser) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReleaser", releaser)
}

// SetReleaser indicates an expected call of SetReleaser.
func (mr *MockProxyIteratorMockRecorder) SetReleaser(releaser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReleaser", reflect.TypeOf((*MockProxyIterator)(nil).SetReleaser), releaser)
}

// Valid mocks base method.
func (m *MockProxyIterator) Valid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Valid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Valid indicates an expected call of Valid.
func (mr *MockProxyIteratorMockRecorder) Valid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Valid", reflect.TypeOf((*MockProxyIterator)(nil).Valid))
}

// Value mocks base method.
func (m *MockProxyIterator) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockProxyIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockProxyIterator)(nil).Value))
}
